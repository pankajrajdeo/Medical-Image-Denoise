# -*- coding: utf-8 -*-
"""Denoise_SwinTiny.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s_RinSbY5B6yq4HdzEHuuYN9YNK1wfGq
"""

!pip install timm
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms, models
from PIL import Image
from pathlib import Path
import numpy as np
import os
from sklearn.model_selection import train_test_split
from skimage.metrics import peak_signal_noise_ratio, structural_similarity
from google.colab import drive
import timm
import matplotlib.pyplot as plt


# Mount Google Drive
drive.mount('/content/drive')

# Custom Dataset class
class DenoiseDataset(Dataset):
    def __init__(self, img_files, noise_files, transform=None):
        self.img_files = img_files
        self.noise_files = noise_files
        self.transform = transform

    def __len__(self):
        return len(self.img_files)

    def __getitem__(self, idx):
        img = Image.open(self.img_files[idx]).convert("RGB")
        noisy_img = Image.open(self.noise_files[idx]).convert("RGB")

        if self.transform:
            img = self.transform(img)
            noisy_img = self.transform(noisy_img)

        return noisy_img, img

# Load dataset function
def load_denoise_dataset(path, mode="train", transform=None):
    base_path = Path(path)

    if mode == "train":
        img_dir = base_path / "train"
        noise_dir = base_path / "train_noise"
    else:
        img_dir = base_path / "test"
        noise_dir = base_path / "test_noise"

    img_files = sorted(list(img_dir.glob("*.png")))
    noise_files = sorted(list(noise_dir.glob("*.png")))

    return DenoiseDataset(img_files, noise_files, transform=transform)


class Reshape(nn.Module):
    def __init__(self, *args):
        super(Reshape, self).__init__()
        self.shape = args

    def forward(self, x):
        return x.view(self.shape)

# Create Swin-Tiny model
def create_swin_tiny_denoise_model():
    model = timm.create_model('swin_tiny_patch4_window7_224', pretrained=True)
    model.head = nn.Sequential(
        nn.Linear(model.head.in_features, 224 * 224 * 3),
        nn.Sigmoid(),
        Reshape(-1, 3, 224, 224),
    )
    return model


# Training function
def train_model(model, dataloaders, criterion, optimizer, num_epochs=50):
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model.to(device)

    for epoch in range(num_epochs):
        print(f'Epoch {epoch}/{num_epochs - 1}')

        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()
            else:
                model.eval()

            running_loss = 0.0

            for inputs, labels in dataloaders[phase]:
                inputs, labels = inputs.to(device), labels.to(device)

                optimizer.zero_grad()

                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    loss = criterion(outputs, labels)

                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                running_loss += loss.item() * inputs.size(0)

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            print(f'{phase} Loss: {epoch_loss:.4f}')

        print()

    return model

# Main function
def main():
    # Define transforms
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
    ])

    # Load the dataset
    train_dataset = load_denoise_dataset("/content/drive/My Drive/Liang/denoise01", mode="train", transform=transform)
    test_dataset = load_denoise_dataset("/content/drive/My Drive/Liang/denoise01", mode="test", transform=transform)

    # Split the training dataset into training and validation sets
    train_size = int(0.8 * len(train_dataset))
    val_size = len(train_dataset) - train_size
    train_data, val_data = torch.utils.data.random_split(train_dataset, [train_size, val_size])

    # Create data loaders
    batch_size = 8
    train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True, num_workers=2)
    val_loader = DataLoader(val_data, batch_size=batch_size, shuffle=True, num_workers=2)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=2)

    dataloaders = {'train': train_loader, 'val': val_loader}

    # Create the ResNet-18 model
    model = create_swin_tiny_denoise_model()

    # Set loss function and optimizer
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=1e-4)

    # Train the model
    num_epochs = 50
    model = train_model(model, dataloaders, criterion, optimizer, num_epochs=num_epochs)

    # Evaluate the model on the test dataset
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model.eval()
    model.to(device)

    psnr_list = []
    ssim_list = []

    with torch.no_grad():
        for i, (noisy_imgs, clean_imgs) in enumerate(test_loader):
            noisy_imgs, clean_imgs = noisy_imgs.to(device), clean_imgs.to(device)
            denoised_imgs = model(noisy_imgs)

            for j in range(denoised_imgs.size(0)):
                denoised_img = denoised_imgs[j].detach().cpu().numpy().transpose(1, 2, 0)
                clean_img = clean_imgs[j].detach().cpu().numpy().transpose(1, 2, 0)
                noisy_img = noisy_imgs[j].detach().cpu().numpy().transpose(1, 2, 0)

                # Get the source image ID
                img_id = test_dataset.img_files[i * len(test_loader) + j].name

                psnr = peak_signal_noise_ratio(clean_img, denoised_img)
                ssim = structural_similarity(clean_img, denoised_img, multichannel=True)

                psnr_list.append(psnr)
                ssim_list.append(ssim)

                # Display the images
                fig, axs = plt.subplots(1, 3, figsize=(15, 5))
                axs[0].imshow(noisy_img)
                axs[0].set_title(f'Noisy Image {img_id}')
                axs[0].axis('off')

                axs[1].imshow(clean_img)
                axs[1].set_title(f'Clean Image {img_id}')
                axs[1].axis('off')

                axs[2].imshow(denoised_img)
                axs[2].set_title(f'Denoised Image {img_id}')
                axs[2].axis('off')

                plt.show()

    avg_psnr = np.mean(psnr_list)
    avg_ssim = np.mean(ssim_list)

    print(f'Average PSNR: {avg_psnr:.4f}')
    print(f'Average SSIM: {avg_ssim:.4f}')


if __name__ == "__main__":
    main()